:PROPERTIES:
:CATEGORY: timesheeting
:END:
#+title: TODO

* Specification
** DONE Specification items to add in v1.1
CLOSED: [2024-11-16 Sat 15:59]
We list the specification items which should be added later.
+ OK What should happen when the software detects that the save data
  is corrupted using the mechanism specified by R-QUA-020?
+ OK Language of the interface: English.
+ OK Indicate to the user at runtime where to report bugs.
+ OK Specify the format in which the software is released.
  As source, plus appimage?

** New feature ideas
+ Template list of tasks for new projects.
+ Description or comment associated to hierarchy items.

* System architecture document
* Subsystem requirements document
** PRJ1-SRS1
Details the requirements applicable to subsystems, as described in the SAD.
+ Which day of the week is the first day?
+ First day of the week user configuration?
+ On which day does the daily entries screen open by default?
+ On which week does the weekly report open by default?
+ Default values of entry metadata when left unspecified.
+ Where should the stopwatch be displayed?

* System Design document
** PRJ1-SDD1
Proposes the implementations of the subsystems, along with a
justification/tradeoff.
+ List the libraries used to implement every subsystem.
  + List the license of all the tools being used.
+ Draw a diagram of the software class hierarchy
  (application->topwindow->tabs->etc.).
+ Propose very abstract drawings for the UI screens.
+ Detail every possible user interaction and how it propagates through
  subsystems. This defines some of the required interfaces between subsystems.
+ Detail the database schema
  See https://github.com/o0101/sqlite-schema-diagram

* External timesheet format
* Test plan
Details every tests used to check the software.
+ Include manual GUI tests.
+ Include unit tests of the core logic.
+ Indicate which tests condition the acceptance of a version.

* Repository documentation
** TODO Add a documentation tree
We need to synthesize the list of documentation available. Perhaps do it
directly in the project readme.
+ We can do a graphviz of all documentation and software. We can show every version
  and the "Applicable documents" links between them.

* Doxygen documentation
** DONE Add libs and modules to the documentation
CLOSED: [2024-11-22 Fri 20:20]
ADDED: [2024-11-19 Tue]
The libs and modules were extracted from ~src/~, we need to add
them back to the documentation.

** DONE The github doxygen pages do not show anything on the index
CLOSED: [2024-11-22 Fri 20:41]
ADDED: [2024-11-22 Fri]
The deployment is successful and pages are there, but the index.html
page is completely empty with no links to anything.
- [2024-11-22 Fri] Fixed by bumping the doxygen version in the github action
  to use the same one as locally: 1.12.0

* Software
** Bugs
*** DONE Fix date parsing
CLOSED: [2024-11-23 Sat 16:24]
ADDED: [2024-08-31 Sat]
In ~date.h~, constructor from string.
The date parsing we are doing is wrong. We hardcoded the current dst
in our location to make it work.
+ We could wait for gcc 14 to have the proper C++20 feature to do this.
+ We tried howard hinnant date, but encountered a compiling error
  abount uninitialized variables when using parse. This is probably
  related to musl.
- [2024-11-23 Sat] We waited for gcc14 and used the std::chrono::parse. It works.
  We have lost the ergonomic flexibility offered by the previous function
  though.

*** DONE Triggering the "export file already exists exception" leaks memory
CLOSED: [2024-11-23 Sat 12:01]
ADDED: [2024-11-02 Sat]
This is fixed by catching the exceptions in main. Uncaught exceptions led
to destructors not being called.

*** DONE Catch exceptions in main
CLOSED: [2024-11-23 Sat 12:00]
ADDED: [2024-11-23 Sat]
Catch all exceptions in main and have them print their message to cerr.
- [2024-11-23 Sat] Catching every std::exception in main and printing what().

*** DONE We are using the wrong type for ncurses characters
CLOSED: [2024-11-24 Sun 10:31]
ADDED: [2024-11-23 Sat]
https://linux.die.net/man/3/getch
getch returns an int and not a char. This does not currently generate
bugs per se, but this prevents us from catching the KEY_RESIZE.
- [2024-11-24 Sun] Changed the type from char to int throughout the input loops.
  We can now catch the KEY_RESIZE events.

** Testing
*** TODO Put the basic CI in place
ADDED: [2024-11-16 Sat]
Check the build only, at first.
*** TODO Test that all the latex documentation builds
ADDED: [2024-11-16 Sat]
Check the latex documentation build.
*** TODO End-to-end testing with tmux
ADDED: [2024-08-25 Sun]
We can test the application in an end-to-end fashion with tmux,
sending characters to the application for performing a planned test scenario.
Do we need to pace the inputs somehow, in any case a sufficient time between
inputs should do.
https://stackoverflow.com/questions/74661549/fake-mock-background-terminal-for-testing-an-ncurses-application

*** TODO Check the WeekBegin date around DST changes
ADDED: [2024-09-05 Thu]
We are unsure about whether it does the best thing around DST changes.
It should get the midnight of the last monday.

** Ergonomy
*** DONE Enforce a display order for hierarchy items
CLOSED: [2024-11-16 Sat 13:35]
ADDED: [2024-09-03 Tue]
For instance, the queries for the list of tasks return a different
order depending on active/archived. Enforce a consistent order between
both. The choice which would make the most sense is to enforce an
order by Id at the DB level.

*** DONE Mark archived hierarchy items in some way in their own screen
CLOSED: [2024-11-24 Sun 15:48]
ADDED: [2024-09-02 Mon]
+ This requires passing the active flag to the UI.
+ We can use string_with_face to do this.
  - [2024-11-24 Sun] In fact, no. menu items only have one property for items,
    which is selectable or not. We are using it to make inactive, bold,
    items in the reports, but this is not applicable for regular lines.
    We need to implement our own menu library to do this, which is
    a big endeavour.
  + An alternative would be to put archived items in parentheses for
    display.
    - [2024-11-24 Sun] OK we did that.

*** TODO Renaming task empties the project
ADDED: [2024-11-16 Sat]
Currently, when renaming a task in entrystaging, a cancellation will
empty the project cell. Make it so that it does nothing instead.

*** DONE Suggestion on substrings
CLOSED: [2024-11-23 Sat 08:55]
ADDED: [2024-11-16 Sat]
The suggestion engine prefers matching "Northern Office" rather than
"Office". We need to prefer the shorter match.
- [2024-11-23 Sat] Changed the rapidfuzz metric to CachedTokenSortRatio,
  which gives better results on preferring a submatch.

*** TODO Toggle archive visibility resets the screen
ADDED: [2024-11-16 Sat]
Currently, toggling archive visibility resets the whole screen.
Make it so the selection stays in place.
- [2024-11-23 Sat] This is quite hard to do because the whole menu is getting
  replaced every time. We would have to add the feature on the menu to
  save the current selection and restore it if possible.
  This is especially difficult when going from the full view to the
  active-only view, if the selection was on an archived item.
  We would have to track the alphabetical order.

*** DONE Reorganize the configuration file
CLOSED: [2024-11-23 Sat 09:20]
ADDED: [2024-11-23 Sat]
Currently the configuration file has two big sections, we need to split
it to make it clearer.
- [2024-11-23 Sat] Subdivided the sections into db, time, log, keys

*** DONE Do not reach program termination when hitting an unassigned key
CLOSED: [2024-11-23 Sat 20:30]
ADDED: [2024-11-23 Sat]
Currently when hitting an unassigned key, the program unwinds until termination.
Fix it so nothing is done instead.
+ We need to implement a quit key.
+ See what happens when a resizing of the terminal window is done.
  We may have to catch it and refresh.

*** TODO Do NOTHING when hitting unbound keys
ADDED: [2024-11-23 Sat]
Currently the program refreshes or shifts the selection when an
unbound key is inputted. Change this behavior to doing absolutely
nothing.

*** DONE Resizing makes some parts of the screen disappear
CLOSED: [2024-11-24 Sun 13:57]
When resizing the TUI to a smaller size, then resizing it back to
its original size, the bottom part of the UI disappears and never
reappears.
+ Be careful to not perform heavy operations when resizing, because
  user may resize the application as a floating window.
  For instance it would probably be heavy to destroy and redraw the
  whole UI.
- [2024-11-24 Sun] Caught the SIGWINCH ourselves, to prevent ncurses from
  performing the automatic resizing. The TUI stays functional if the
  initial size is restored.

*** TODO Handle resizing
ADDED: [2024-11-24 Sun]
Handle the dynamic resizing of the TUI.
+ Make use of the full available terminal size.
+ Ensure a minimum size is available, like xx lines per 80 columns.
  If it is not reached then stop the UI until it becomes big enough.

*** TODO Be flexible on the accepted input dates
ADDED: [2024-11-23 Sat]
Currently the inputted dates must be exactly in the format "23Nov2024 13:25:00".
Also accept "23Nov2024", "23Nov2024 13", "23Nov2024 13:25" and fill with
zeroes.

** Refactoring
*** TODO Refactor MenuNCurses
ADDED: <2024-09-01 Sun>
We can include the status bar display and basic input_loop navigation directly
in the MenuNCurses class.
Add the border highlighting there also.

*** DONE Make constructors explicit
CLOSED: [2024-11-23 Sat 17:02]
ADDED: [2024-09-01 Sun]
Through ignorance on our part, we have neglected to set constructors to explicit
by default. Fix it.

*** TODO Make sure the types are coherent
ADDED: [2024-09-14 Sat]
For instance, sqlite uses the type sqlite3_int64, we use uint64_t,
should we switch?

*** DONE Extract library modules
CLOSED: [2024-11-23 Sat 17:02]
ADDED: [2024-09-22 Sun]
Extract generic library modules from the existing codebase, to import them
more easily and test them separately. Only extract the parts which are generic.
+ sqlite lib
+ ncurses lib
+ date management objects? (day, week, date, date_range, duration, timezone)

*** DONE Create namespaces for the libs and different parts of the program
CLOSED: [2024-11-23 Sat 17:02]
ADDED: [2024-09-22 Sun]
Currently everything is in the global namespace, which is bad practice.

*** TODO Extract a generic library for the config file
ADDED: [2024-10-13 Sun]
There is a generic part to the config file module.
+ Searching for the default location.
+ Expanding tilde.

This will allow us to add logs to the config module which will arise
out of this, without coupling it to the library.

** Performance
*** TODO Remove useless refreshes and updates
ADDED: [2024-09-27 Fri]
Monitor closely the refresh() and update() operations and remove the
useless ones.

*** TODO Export the CSV from the DB line by line instead of in-full
ADDED: [2024-11-02 Sat]
Our goal is to reduce the memory footprint of the export operation.
We can do it very easily by having the DB function return
a std::generator<ExportRow> but we have to wait for GCC14.

*** TODO Use a hash function to match key bindings dynamically
ADDED: [2024-11-10 Sun]
Currently we are doing an else if table, which is suboptimal.
This should not matter very much of course, but it is
cleaner to use some kind of hash from dynamic key to an enum of keys,
and then match the enums in a switch statement.

** Build
*** TODO Enforce the GCC14 dependency
ADDED: [2024-11-23 Sat]
We depend on std::chrono::parse (and other things) being implemented
by the compiler vendor.
Can we find a way to signal this dependency in the build system?
We do not want to forbid other compilers from working either.

** Features
*** DEAD Implement a check of the DB when opening
CLOSED: [2024-11-23 Sat 17:10]
ADDED: [2024-11-16 Sat]
+ Check that all tables are indeed present.
  - [2024-11-23 Sat] It is in fact meaningless since we create the tables right
    when the DB opens anyway.
+ OK Check the version of the DB.

*** DONE Run pragma optimize on closing sqlite
CLOSED: [2024-11-23 Sat 17:16]
ADDED: [2024-09-01 Sun]
It seems recommended: https://www.sqlite.org/lang_analyze.html
- [2024-11-23 Sat] ADDED ~PRAGMA optimize;~ when closing the DB handle
  in db_lib.

*** TODO Consider implementing an undo and redo
ADDED: [2024-09-03 Tue]
Perhaps at least the last SQL db action?

*** DONE Use a date format with timezone in logs.
CLOSED: [2024-11-16 Sat 15:05]
ADDED: [2024-11-16 Sat]
Currently the logs are ambiguous, they show the local time but without
more indication.

*** TODO Complete the logging messages
ADDED: [2024-11-23 Sat]
We are supposed to log every event which changes the DB state at least.
+ Add log messages to cover all DB states changes.
+ Add more information in the log messages: exactly what was changed every time.

*** TODO Clean old log entries
ADDED: [2024-10-26 Sat]
+ Launch it at startup.
Start from the top of the log file, parse the date into an internal UTC format,
compare it with startup time, any line which is older than target gets deleted,
we stop once we reach the first recent enough entry.

*** DONE Catch the fact that a configuration file does not exist
CLOSED: [2024-11-24 Sun 16:11]
ADDED: [2024-11-01 Fri]
We currently get a toml exception which is too cryptic for users.
+ [2024-11-24 Sun] OK we now throw our own exception. It gives a clearer message.
  It is thrown when providing an inexistent file with the -c flag in the CLI.

*** TODO Bind arrow keys to up/down/left/right
ADDED: [2024-11-09 Sat]
Use alternative bindings to bind arrow keys to navigation.
It does not seem we can escape a character to represent the arrow
key. We have to use a string to represent it.

*** TODO Implement a set of special keys available for bindings
ADDED: [2024-11-10 Sun]
Add a set of special keys along with "ESCAPE", such as "ALT", "LSHIFT",
etc.

*** TODO Implement the alternative key bindings
ADDED: [2024-11-10 Sun]
Note these are optional. Only those which are present in the configuration
are loaded. The rest are kept to zero.

*** DONE Write the make install script
CLOSED: [2024-11-24 Sun 14:33]
ADDED: [2024-11-23 Sat]
We need the install script for our program.
+ This can probably be done in cmake directly.
+ Actions:
  + Put the binary at the appropriate place.
  + Put the config file in dotfiles.
- [2024-11-24 Sun] Wrote the installation instructions in CMakeLists.txt, the binary
  is deployed in `/bin/`, the default configuration file in `/etc/`.
