:PROPERTIES:
:CATEGORY: timesheeting
:END:
#+title: TODO

* Specification
** DONE Make the specification into a latex document
CLOSED: [2024-01-21 Sun 22:12]
ADDED: <2024-01-20 Sat>

We want to be able to publish signed revisions of it.
+ OK Add a document reference to it.
+ OK Add an applicable documents table to it.
+ OK Number requirements
+ OK Add rationale for some requirements.
+ OK Complete the definition list.
  + OK UI screen
  + OK save profile?
+ OK Add list of acronyms

** DONE Publication of PRJ1-SPE1-v1.0
CLOSED: [2024-01-23 Tue 20:22]
+ OK Sign the pdf with gpg.
+ OK Tag the relevant commit.
+ OK Publish as a release on github.
+ OK Publish on personal website.

** TODO Specification items to add in v2
We list the specification items which should be added later.
+ Which day of the week is the first day?
+ First day of the week user configuration?
+ On which day does the daily entries screen open by default?
+ On which week does the weekly report open by default?
+ Default values of entry metadata when left unspecified.
+ What should happen when the software detects that the save data
  is corrupted using the mechanism specified by R-QUA-020?
+ Template list of tasks for new projects.
+ Maintenance, bug reporting and persistent reports, non-regression.
+ Language of the interface: English.
+ Indicate to the user at runtime where to report bugs.
+ Specify the format in which the software is released.
  As source, plus appimage?
+ Description or comment associated to hierarchy items.
+ Where should the stopwatch be displayed?

* System architecture document
** DONE Drafting PRJ1-SAD1-v1.0
CLOSED: [2024-02-11 Sun 10:50]
ADDED: [2024-01-24 Wed]
+ Decompose the system into subsystems.
+ Describe also the build process, interaction with the software distributor,
  and dependencies.
+ Don't propose solutions/libraries for implementing the subsystems yet,
  this is the role of the design document.
+ Must include a matrix dispatching the requirements to subsystems.
+ See 'embedded database' for the database subsystem.
+ Provide justification for the architecture choice, in particular why
  a web app is not made.

* Subsystem requirements document
** PRJ1-SRS1
Details the requirements applicable to subsystems, as described in the SAD.

* System Design document
** PRJ1-SDD1
Proposes the implementations of the subsystems, along with a
justification/tradeoff.
+ List the libraries used to implement every subsystem.
  + List the license of all the tools being used.
+ Draw a diagram of the software class hierarchy
  (application->topwindow->tabs->etc.).
+ Propose very abstract drawings for the UI screens.
+ Detail every possible user interaction and how it propagates through
  subsystems. This defines some of the required interfaces between subsystems.
+ Detail the database schema

* Test plan
Details every tests used to check the software.
+ Include manual GUI tests.
+ Include unit tests of the core logic.
+ Indicate which tests condition the acceptance of a version.

* Repository documentation
** TODO Add a documentation tree
We need to synthesize the list of documentation available. Perhaps do it
directly in the project readme.
+ We can do a graphviz of all documentation and software. We can show every version
  and the "Applicable documents" links between them.

** DONE Add a project timeline
CLOSED: [2024-01-23 Tue 19:59]
Add to the README a project timeline with the dates of release of the
documents and software.

* Software
** DONE Draft the GUI
CLOSED: [2024-02-18 Sun 17:44]
Reach a point where every main UI screen is present. Individual dialogs will be
implemented later.
+ Main UI with tabs and toolbar.
+ About dialog
+ Tabs:
  + Daily entries
  + Hierarchy items
  + Project totals
  + Weekly report
  + Export tool
+ Status:
  + Stopwatch in use
  + Save done/in progress/failed

** DEAD Draft the Daily entries screen
CLOSED: [2024-07-21 Sun 18:51]
ADDED: [2024-02-28 Wed]
Implement the gtk objects for presenting the daily entries.
It is roughly a VBox containing:
+ Day:
  + Current selected day display,
  + Select next/prev
  + Click on selected day to open calendar dialog and switch.
+ The total time for the day
+ The scrollable list of entries with, on each line,
  + Project name, Task name, start time, duration
+ The entry addition interface below, with a stopwatch.

*** Table of entries
See this:
https://stackoverflow.com/questions/77035908/gtkmm-4-10-scrolled-window-set-adjustments-horizontal-vertical-not-aut
There is an example from the gtkmm team here:
https://github.com/GNOME/gtkmm/blob/master/demos/gtk-demo/example_listview_columnview.cc

We should use ColumnView instead of TreeView since
TreeView is deprecated.
See
https://stackoverflow.com/questions/76711050/how-to-create-a-treeview-like-ui-using-columnview-in-gtk4
https://stackoverflow.com/questions/73145916/how-do-i-use-gtk4s-columnview-to-replace-treeview-in-python

** DEAD Dealing with stopwatch state
CLOSED: [2024-07-21 Sun 18:51]
How do we deal with the stopwatch object?
It needs to live in a given tab, but its state is also displayed in the status
bar. How do we share a view-only object from the tab to the status bar?
+ Maybe create the stopwatch object in main, and pass a shared_pointer
  throughout the object tree towards the "Daily entries" tab and a const
  shared_pointer to the status bar?

** Fixes
*** TODO Source tree organization.
+ Organize the source tree into:
  + GUI
  + Logger
  + DB
  + Configuration manager
+ Implement an organized source tree: src/gui/, and make the tree reflect
  the GUI class hierarchy.

*** DONE Manage more projects and tasks than one page
CLOSED: [2024-07-28 Sun 10:35]
ADDED: [2024-07-27 Sat]
Currently the window goes blank if we add too many projects.
OK, we implemented this using menu, and ~set_menu_format~.
** Features
*** DONE Rename tasks
CLOSED: [2024-07-28 Sun 15:52]
- <2024-07-28 Sun> Added the db interface for renaming tasks. Made renaming
  mostly generic in project_task_table.

*** DONE Add tasks
CLOSED: [2024-07-28 Sun 16:17]
- [2024-07-28 Sun] Implemented the adding of tasks in project_task_table.

*** DONE Add a status bar
CLOSED: [2024-07-29 Mon 22:34]
The status bar should display the name of the current project or task
with more characters.
It will be used to ask for confirmation for deletions, and display
error messages.

*** TODO Make project and task names UNIQUE
Do not do anything to the DB in case it is rejected.
A conflict can happen when:
+ Adding a new project or task.
+ Renaming existing project or task.
Display an error message in the status bar.

*** TODO Fix: Handle the case where we have zero projects when starting
ADDED: [2024-07-30 Tue]
If we start with an empty DB, the interface just crashes.
This is probably related to the status bar display of the current
item in the input loop for ~project_task_table~.

*** TODO Delete tasks
Ask confirmation in the status bar.

*** TODO Delete projects
Also delete all tasks.
