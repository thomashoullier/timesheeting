:PROPERTIES:
:CATEGORY: timesheeting
:END:
#+title: TODO

* Specification
** New feature ideas
+ Template list of tasks for new projects.
+ Description or comment associated to hierarchy items.
** HOLD Erratum v1.1
+ R-UEI-050: typo ~part entries~ -> ~past entries~

* System architecture document
* System requirements document
** PRJ1-SRD1
Details the requirements applicable to subsystems, as described in the SAD.
+ Which day of the week is the first day?
+ First day of the week user configuration?
+ On which day does the daily entries screen open by default?
+ On which week does the weekly report open by default?
+ Default values of entry metadata when left unspecified.
+ Where should the stopwatch be displayed?

*** DONE Realign the specifications with the new additions for v0.8 release
CLOSED: [2025-06-07 Sat 09:01]
ADDED: [2025-05-26 Mon]
We made several additions throughout libraries and modules, document
them. See the test coverage report as an indication of what was not already
included.
+ [2025-05-30 Fri] Added requirements and tests for the missing parts.
+ [2025-06-07 Sat] Added the "Tested by" link to all requirements.

*** TODO Add the uplink from modules requirements to top requirements.
ADDED: [2025-06-01 Sun]
Keep in mind that we want to put the libraries in a generic project at
some point, so do not couple them with the top-level requirements.

*** TODO Specify the TUI
+ Propose very abstract drawings for the UI screens.
+ Draw a diagram of which user interaction is available on which screen.
  Give which UI element is displayed first on startup.

* System Design document
** PRJ1-SDD1
Proposes the implementations of the subsystems, along with a
justification/tradeoff.
+ List the libraries used to implement every subsystem.
  + List the license of all the tools being used.
+ Draw a diagram of the software class hierarchy
  (application->topwindow->tabs->etc.).
+ Detail every possible user interaction and how it propagates through
  subsystems. This defines some of the required interfaces between subsystems.
+ Detail the database schema
  See https://github.com/o0101/sqlite-schema-diagram
+ Also give the choices to implement the offline subsystems.

* External timesheet format
* Test plan: PRJ1-TST1
Details every tests used to check the software.
+ Include manual GUI tests.
+ Include unit tests of the core logic.
+ Indicate which tests condition the acceptance of a version.

* Repository documentation
** TODO Add a documentation tree
We need to synthesize the list of documentation available. Perhaps do it
directly in the project readme.
+ We can do a graphviz of all documentation and software. We can show every version
  and the "Applicable documents" links between them.

** TODO Add a presentation video
ADDED: [2024-11-26 Tue]
Record a video for showing the basic operation of the software.
+ We can prepare a transcript and use TTS to generate a voice-over.

* Doxygen documentation
* CI
*** TODO Doxygen treat non-documented code as error
ADDED: [2025-04-29 Tue]
Report a failed CI step if doxygen finds undocumented code.

* Software
** Bugs
*** TODO UTF-8 characters support in status bar and ncurses_lib.
ADDED: [2025-05-07 Wed]
Some characters are not displayed correctly when in edit mode.
They are displayed OK elsewhere.
+ This is likely due to the method BarNCurses::add_char which takes
  a char type as argument when it should take an int.
  + We have a problem with erasing characters, special characters such
    as ~Ã©~ are only half erased from the string buffer, leading to
    total garbage being output.
    This is because UTF-8 characters are encoded over multiples bytes,
    but std::string treats only one byte at a time.
    ncurses actually outputs multiple ints for some characters but we
    delete only one byte at a time in the input buffer.
  + ~std::u8string~ exists, see if it is sufficient.
    See third party https://github.com/nemtrif/utfcpp instead
    (in gentoo repos).
    Also see the ~ICU~ library (maybe more widespread?)
  + There are issues of computing the number of characters in the string
    in the ncurses library itself (size of windows etc.).
    We need to change every string to a u8string one if it works.
  + ~size~ could be replaced by ~utf8::distance~.
+ Track down other mistaken uses of char in the program instead of int.
+ Add tests for special characters in the DB module, or better, in DB lib.
+ We can implement a module which behaves like ~std::string~ except we
  deal with UTF-8 code points (approx. characters) instead of chars.

*** TODO Sometimes on system startup, the entrystaging bar does not display, it stays invisible
ADDED: [2025-05-21 Wed]
+ It is unlikely to be related to sqlite since we would have gotten
  an error message. Also the status bar displays the entrystaging contents
  so it is somehow loaded but not displayed.
+ This could be related to the WM spawning the window.
+ We are not able to reproduce this by running
  ~launch-terminal -e ./timesheeting -c ../run/timesheeting.toml~
  maybe we need the disk to be busy for the problem to appear?
  + We tried to launch the program repeatedly while the NAS is
    busy copying a large video to our computer, we did not see the bug.
    Maybe it's not busy enough, as its just one file.
  + Can we simulate a slow drive somehow?
+ What is mysterious is that nothing in the program runs out-of-order,
  it should be always the same startup sequence. ncurses draws and refreshes
  should always happen in the same order.
+ We managed to reproduce the bug consistently by closing all instances
  of ~alacritty~, and running our launcher script.
  The bug seems to be related to alacritty not giving the right window
  size when it starts for the first time.
  + Try to log the terminal size which is read on startup to check.
    + We logged what happened on launch. Initially the terminal
      says the window is bigger than the actual size.
  + Note that the display recovers if we resize the terminal, we
    could try sending a resize signal after startup is done.

*** TODO Initialize the ncurses locale
ADDED: [2025-06-25 Wed]
The ncurses manual recommends initializing the locale:
https://invisible-island.net/ncurses/man/ncurses.3x.html#h3-Initialization

*** TODO UI crashes when resizing on project report screen to a very thin row.
ADDED: [2025-06-28 Sat]
When resizing the terminal to a very thin horizontal line when the project
report screen is active, the program crashes.
It does not crash on any other screen.
The resizes happen up until max_y = 2 or 3.

** Testing
*** TODO Does the Catch2 main catch exceptions?
ADDED: [2024-12-30 Mon]
We are concerned about leaking memory in case tests fail unexpectedly.

*** TODO End-to-end testing with tmux
ADDED: [2024-08-25 Sun]
We can test the application in an end-to-end fashion with tmux,
sending characters to the application for performing a planned test scenario.
Do we need to pace the inputs somehow, in any case a sufficient time between
inputs should do.
https://stackoverflow.com/questions/74661549/fake-mock-background-terminal-for-testing-an-ncurses-application
+ We tested the method. It seems to work great. We can pilot a tmux session
  from a script and run timesheeting.
+ We can setup a compilation target with profiling etc. enabled and run
  a coverage report on it by launching tmux on it.
+ We can reach most of the TUI lines of code in this fashion, and check
  the state of the DB at the end.
+ We can report the coverage separately from the unit tests. And also
  maybe combine the reports into one to show overall test coverage.
  Merging two lcov reports is mentioned here:
  https://stackoverflow.com/questions/60544108/merge-lcov-results-in-one-report-and-keep-the-test-ids-testing-each-line

*** TODO Check the WeekBegin date around DST changes
ADDED: [2024-09-05 Thu]
We are unsure about whether it does the best thing around DST changes.
It should get the midnight of the last monday.

*** TODO Add tests related to DST change across time_lib
ADDED: [2025-01-22 Wed]

*** TODO Test the disconnection of the DB
ADDED: [2025-04-13 Sun]
What happens when we disconnect the DB? A DB was opened but the
file is moved or network connection interrupted for instance.
The program should throw and terminate.
Add an explicit test of the behavior at the db_lib level.

** Ergonomy
*** TODO Consider custom ordering of the hierarchy items
ADDED: [2024-11-26 Tue]
This would impact the way they are displayed in the hierarchy screen and also
which task is selected by default when a project is put in entrystaging.
+ Modifying the whole ordering might be tedious, but the first task to appear may
  be set to the last one used? We could have a table for tracking this per-project.

*** TODO Avoid the global refresh when changing the duration display format.
ADDED: [2025-03-22 Sat]
Currently the whole screen refreshes whenever we need to change the duration
display on any screen. Find a way to only refresh what is needed.

*** TODO Only update the current date in the stopwatch when using set_now
ADDED: [2025-03-22 Sat]
Currently a global update of the stopwatch is called whenever we
call set_now. Make it so that only the changed date is updated.
This is a bit nitpicky.

** Refactoring
*** TODO Common template for week selector and day selector.
ADDED: [2025-04-05 Sat]
We can also have a concept of period in the date library for day and week.

*** TODO Factorize the DB tests
ADDED: [2025-05-05 Mon]
Keeping the same tests, there is a lot of room to factorize them
with the Catch2 SECTION feature. Currently the tests are needlessly
long.

*** TODO Remove reliance on DateParsingFailure exception
ADDED: [2025-05-24 Sat]
We rely on catching the ~DateParsingFailure~ exception when it would
be better to return a maybe Date.

*** TODO DateRange: Hide start/stop attributes
ADDED: [2025-05-24 Sat]
Implement a method for changing these attributes, but do not expose
them like this.
+ Also add a check for start/stop ordering when changing.

** Performance
*** TODO Remove useless refreshes and updates
ADDED: [2024-09-27 Fri]
WAIT for the custom menu implementation.
Monitor closely the refresh() and update() operations and remove the
useless ones.

*** TODO Resize ncurses windows instead of recreating
ADDED: [2025-04-06 Sun]
Is there a way to resize the ncurses windows instead of destroying
and recreating them? We have a relatively high heap usage because of
this it seems.

*** TODO Suggestion: the substring matchers are inefficient
ADDED: [2025-04-19 Sat]
There are a lot of memory allocations being done in the substring
matcher and case converter. There is probably a more efficient way to
do all this.

*** TODO Reduce the size of the binary
ADDED: [2025-04-21 Mon]
The binary for the program sometimes reaches almost 20MB.
This is too big, it should be well below 5MB.
Perhaps our CMake compilation of individual libraries is at fault.
We should probably link everything together.
Perhaps use shared libraries instead of statically linking everything?
+ It turns out that with the cmake options set to compile only the
  main target, the binary is not that big. It is activating the
  test coverage which bloats the main binary. This is a misconfiguration of
  cmake on our part.

*** TODO Exporter module: avoid std::endl
ADDED: [2025-05-05 Mon]
std::endl flushes the buffer every time.
I think we are calling it too often currently, which may slow
the export in the case of large volumes.

** Build
*** TODO Enforce the GCC14 dependency
ADDED: [2024-11-23 Sat]
We depend on std::chrono::parse (and other things) being implemented
by the compiler vendor.
Can we find a way to signal this dependency in the build system?
We do not want to forbid other compilers from working either.

** Features
*** TODO Complete the logging messages
ADDED: [2024-11-23 Sat]
We are supposed to log every event which changes the DB state at least.
+ Add log messages to cover all DB states changes.
+ Add more information in the log messages: exactly what was changed every time.

** Features under consideration
*** TODO Consider implementing an undo and redo
ADDED: [2024-09-03 Tue]
Perhaps at least the last SQL db action?
+ It could be easy to implement if it is tied only to the DB and already
  supported by sqlite3?

*** TODO Consider fusing tasks together into one task
ADDED: [2024-12-02 Mon]
+ Would this be permanent? Could we retain the original information?
+ How would this look in export?
+ Do we need meta-tasks?

*** TODO ASCII visualization of the current day filling
ADDED: [2024-12-09 Mon]
Visualize how the current day is filled by the tasks inputted.
We could show overlaps here?
We could highlight the part of the bar corresponding to the currently selected task.

*** TODO Search in menu (like in ncmpcpp)
ADDED: [2025-01-24 Fri]
Be able to jump to a given item in a menu through text search.

*** TODO Report durations of entries overlapping the period of query
Report the real duration of entries over the query period,
and not just the sum of the duration of entries for which the start
date falls in the period.

*** TODO Entries screen: go to specific day
ADDED: [2025-05-01 Thu]
Add a binding for going to a specific day by typing it a date contained in it.

*** TODO Weekly screen: go to specific week
ADDED: [2025-05-01 Thu]
Add a binding for going to specific week by typing a date contained in it.

*** TODO Entries screen: go to next/previous days containing something
ADDED: [2025-05-01 Thu]
Add a binding for going to next or previous day containing any entry.
Stay on first or last once reached.

*** TODO Weekly screen: go to next/previous week containing something
ADDED: [2025-05-01 Thu]
Add a binding for going to next or previous week containing any entry.
Stay on first or last once reached.

*** TODO Arbitrarily deep nesting of projects/subprojects
ADDED: [2025-05-14 Wed]
