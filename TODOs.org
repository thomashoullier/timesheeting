:PROPERTIES:
:CATEGORY: timesheeting
:END:
#+title: TODO

* Specification
** New feature ideas
+ Template list of tasks for new projects.
+ Description or comment associated to hierarchy items.
** HOLD Erratum v1.1
+ R-UEI-050: typo ~part entries~ -> ~past entries~

* System architecture document
* System requirements document
** PRJ1-SRD1
Details the requirements applicable to subsystems, as described in the SAD.
+ Which day of the week is the first day?
+ First day of the week user configuration?
+ On which day does the daily entries screen open by default?
+ On which week does the weekly report open by default?
+ Default values of entry metadata when left unspecified.
+ Where should the stopwatch be displayed?

*** TODO Specify the config_lib
ADDED: [2024-12-29 Sun]

*** TODO Specify the time_lib
ADDED: [2024-12-29 Sun]

* System Design document
** PRJ1-SDD1
Proposes the implementations of the subsystems, along with a
justification/tradeoff.
+ List the libraries used to implement every subsystem.
  + List the license of all the tools being used.
+ Draw a diagram of the software class hierarchy
  (application->topwindow->tabs->etc.).
+ Propose very abstract drawings for the UI screens.
+ Detail every possible user interaction and how it propagates through
  subsystems. This defines some of the required interfaces between subsystems.
+ Detail the database schema
  See https://github.com/o0101/sqlite-schema-diagram
+ Also give the choices to implement the offline subsystems.

* External timesheet format
* Test plan
** PRJ1-TST1
Details every tests used to check the software.
+ Include manual GUI tests.
+ Include unit tests of the core logic.
+ Indicate which tests condition the acceptance of a version.

*** TODO Describe the tests for the version module
ADDED: [2024-12-29 Sun]

*** TODO Describe the tests for the config_lib
ADDED: [2024-12-29 Sun]

*** TODO Describe the tests for the time_lib
ADDED: [2024-12-29 Sun]

* Repository documentation
** TODO Add a documentation tree
We need to synthesize the list of documentation available. Perhaps do it
directly in the project readme.
+ We can do a graphviz of all documentation and software. We can show every version
  and the "Applicable documents" links between them.

** TODO Add a presentation video
ADDED: [2024-11-26 Tue]
Record a video for showing the basic operation of the software.
+ We can prepare a transcript and use TTS to generate a voice-over.

* Doxygen documentation
* CI
*** DONE Add a test coverage report
CLOSED: [2025-01-05 Sun 17:20]
ADDED: [2024-12-29 Sun]
Use lcov or gcov and upload the report to something publicly browsable which
gives which parts of the source are covered.

* Software
** Bugs
*** DONE Escape and keypad cannot be used simultaneously in ncurses
CLOSED: [2025-01-12 Sun 15:47]
ADDED: [2025-01-07 Tue]
The support for keypad we added conflicts with binding the escape key
in edit mode.
+ One quick fix would be to disable the keypad when entering edit mode,
  and re-enable it when leaving.
+ We initialized the status bar so that it does not interpret the keypad
  keys.

*** TODO Project report total does not update immediately when changing the period
ADDED: [2025-01-12 Sun]

** Testing
*** TODO Does the Catch2 main catch exceptions?
ADDED: [2024-12-30 Mon]

*** TODO Test the config_lib
ADDED: [2024-12-29 Sun]

*** TODO Test the time_lib
ADDED: [2024-12-29 Sun]

*** TODO End-to-end testing with tmux
ADDED: [2024-08-25 Sun]
We can test the application in an end-to-end fashion with tmux,
sending characters to the application for performing a planned test scenario.
Do we need to pace the inputs somehow, in any case a sufficient time between
inputs should do.
https://stackoverflow.com/questions/74661549/fake-mock-background-terminal-for-testing-an-ncurses-application

*** TODO Check the WeekBegin date around DST changes
ADDED: [2024-09-05 Thu]
We are unsure about whether it does the best thing around DST changes.
It should get the midnight of the last monday.
*** TODO Add tests related to DST change across time_lib
ADDED: [2025-01-22 Wed]

** Ergonomy
*** HOLD Toggle archive visibility resets the screen
ADDED: [2024-11-16 Sat]
WAIT for the custom menu implementation
Currently, toggling archive visibility resets the whole screen.
Make it so the selection stays in place.
- [2024-11-23 Sat] This is quite hard to do because the whole menu is getting
  replaced every time. We would have to add the feature on the menu to
  save the current selection and restore it if possible.
  This is especially difficult when going from the full view to the
  active-only view, if the selection was on an archived item.
  We would have to track the alphabetical order.

*** HOLD Do NOTHING when hitting unbound keys
ADDED: [2024-11-23 Sat]
WAIT for the custom menu implementation
Currently the program refreshes or shifts the selection when an
unbound key is inputted. Change this behavior to doing absolutely
nothing.

*** HOLD Handle resizing
ADDED: [2024-11-24 Sun]
WAIT for the custom menu implementation
Handle the dynamic resizing of the TUI.
+ Make use of the full available terminal size.
+ Ensure a minimum size is available, like xx lines per 80 columns.
  If it is not reached then stop the UI until it becomes big enough.

*** TODO Be able to change the currently selected day from the stopwatch
ADDED: [2024-11-26 Tue]

*** TODO Consider custom ordering of the hierarchy items
ADDED: [2024-11-26 Tue]
This would impact the way they are displayed in the hierarchy screen and also
which task is selected by default when a project is put in entrystaging.
+ Modifying the whole ordering might be tedious, but the first task to appear may
  be set to the last one used? We could have a table for tracking this per-project.

*** TODO While in the weekly report, do not reset the cursor position when changing the duration display format
ADDED: [2024-12-08 Sun]
Currently the cursor goes back to the top of the screen when the duration
display format is changed. This is annoying because sometimes we would like
to see the duration for the currently selected item in multiple formats.

** Refactoring
*** DEAD Refactor MenuNCurses
CLOSED: [2024-11-25 Mon 21:59]
ADDED: <2024-09-01 Sun>
We can include the status bar display and basic input_loop navigation directly
in the MenuNCurses class.
Add the border highlighting there also.
- [2024-11-25 Mon] We will replace it with a custom menu implementation.

*** TODO Implement a custom ncurses menu
ADDED: [2024-11-24 Sun]
Currently, using the ncurses menu library, we cannot put highlight
and colors on items. Also, we have to destroy and recreate the whole
menu when we could just redraw some things.
+ See whether someone already did this in c++
+ Develop on a separate branch, as it is a large task.
+ We can store "MenuItems" which have a string content, a short string
  content, and appearance attributes.
+ Interface with the existing window class.
+ Menu has to include multi-column. A custom menu is necessary to make
  columns with variable width.
+ Prepare for dynamic resizing.

*** TODO Decouple the ncurses_lib from log_lib
ADDED: [2024-11-27 Wed]
It makes no sense to have ncurses_lib depend on any logging. It
makes the library less reusable.
+ The reason they are coupled is because of the input_loop timing.
+ We could add a window class in the tui module which defines
  an instrumented input_loop on top of the basic input_loop.
  We likely have to do the same with every window child class.

** Performance
*** HOLD Remove useless refreshes and updates
ADDED: [2024-09-27 Fri]
WAIT for the custom menu implementation.
Monitor closely the refresh() and update() operations and remove the
useless ones.

*** DONE Use a hash function to match key bindings dynamically
CLOSED: [2025-01-12 Sun 16:03]
ADDED: [2024-11-10 Sun]
Currently we are doing an else if table, which is suboptimal.
This should not matter very much of course, but it is
cleaner to use some kind of hash from dynamic key to an enum of keys,
and then match the enums in a switch statement.
- [2025-01-12 Sun] Implemented key to Actions maps for bindings. The if ladders are
  replaced with switch statements.

** Build
*** TODO Enforce the GCC14 dependency
ADDED: [2024-11-23 Sat]
We depend on std::chrono::parse (and other things) being implemented
by the compiler vendor.
Can we find a way to signal this dependency in the build system?
We do not want to forbid other compilers from working either.

** Features
*** DONE Abandon primary/alternative mapping of keys in config
CLOSED: [2025-01-15 Wed 21:46]
ADDED: [2025-01-14 Tue]
Use a list of strings for indicating keys for a given mapping in the config
file. Add everything to the map when loading. In this fashion we can have as
many bindings as we want.
- [2025-01-15 Wed] Implemented this solution.

*** TODO Complete the logging messages
ADDED: [2024-11-23 Sat]
We are supposed to log every event which changes the DB state at least.
+ Add log messages to cover all DB states changes.
+ Add more information in the log messages: exactly what was changed every time.

*** DONE Protect against binding the same key twice to the same mode
CLOSED: [2025-01-16 Thu 20:13]
ADDED: [2024-11-28 Thu]
When loading the keys into BoundKeys, check that keys are not bound twice in the
same section. Edit mode and the other sections may mix however.
Stop with an exception if this is the case.
+ We have to check navigation+actions together, and edit_mode separately.
+ This takes care of itself if we build a hashmap for the related
  issue abount mapping keys to an enum, existing keys can be detected as they
  are added.
+ We need to include backspace in the map also somehow, since it is matched
  in the status_bar functions.
- [2025-01-16 Thu] Added an exception throw in the BindingMap class when
  we try to map an existing binding.

*** DEAD Implement a check of the DB when opening
CLOSED: [2024-11-23 Sat 17:10]
ADDED: [2024-11-16 Sat]
+ Check that all tables are indeed present.
  - [2024-11-23 Sat] It is in fact meaningless since we create the tables right
    when the DB opens anyway.
+ OK Check the version of the DB.

*** TODO Clean old log entries
ADDED: [2024-10-26 Sat]
+ Launch it at startup.
Start from the top of the log file, parse the date into an internal UTC format,
compare it with startup time, any line which is older than target gets deleted,
we stop once we reach the first recent enough entry.

*** DONE Bind arrow keys to up/down/left/right
CLOSED: [2025-01-05 Sun 17:06]
ADDED: [2024-11-09 Sat]
Use alternative bindings to bind arrow keys to navigation.
It does not seem we can escape a character to represent the arrow
key. We have to use a string to represent it.

*** DONE Implement a set of special keys available for bindings
CLOSED: [2025-01-05 Sun 17:06]
ADDED: [2024-11-10 Sun]
Implement the following special keys:
+ ESCAPE
+ ENTER
+ SPACE
+ TAB
+ UP/RIGHT/DOWN/LEFT

*** DONE Implement the alternative key bindings
CLOSED: [2025-01-05 Sun 15:15]
ADDED: [2024-11-10 Sun]
Note these are optional. Only those which are present in the configuration
are loaded. The rest are kept to zero.

*** TODO Prevent overlapping entries
ADDED: [2024-11-25 Mon]
Overlapping entries have no use-case, do they? Should we forbid
them at the DB level?
+ It could get annoying when manually entering entries. We would have to
  type dates to the second.
  + Not if we allow start(n) >= end(n-1)
+ This likely requires a table change, think about migration.
+ See this answer: https://stackoverflow.com/a/44347885/10376845
  we need to modify the condition, which does not suit us.
  https://stackoverflow.com/questions/4023160/prevent-inserting-overlapping-date-ranges-using-a-sql-trigger
  Can we use BETWEEN? -> yes
  https://stackoverflow.com/questions/9581458/how-can-i-prevent-date-overlaps-in-sql
+ Check that there are no overlaps in our DB first.
+ Print an error in the status bar if the case is encountered.

** Features under consideration
*** TODO Consider implementing an undo and redo
ADDED: [2024-09-03 Tue]
Perhaps at least the last SQL db action?
+ It could be easy to implement if it is tied only to the DB and already
  supported by sqlite3?

*** TODO Consider fusing tasks together into one task
ADDED: [2024-12-02 Mon]
+ Would this be permanent? Could we retain the original information?
+ How would this look in export?
+ Do we need meta-tasks?

*** TODO ASCII visualization of the current day filling
ADDED: [2024-12-09 Mon]
Visualize how the current day is filled by the tasks inputted.
We could show overlaps here?
We could highlight the part of the bar corresponding to the currently selected task.
